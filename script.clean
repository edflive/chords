// Guitar Chord Helper – Final Version

// --- State Variables & Constants ---
const LOCAL_STORAGE_KEY = 'currentGuitarSong';
const SAVED_SONGS_KEY = 'guitarAppSavedSongs';

const noteFrequencies = {
    'C3': 130.81, 'C#3': 138.59, 'D3': 146.83, 'D#3': 155.56, 'E3': 164.81, 'F3': 174.61, 'F#3': 185.00, 'G3': 196.00, 'G#3': 207.65, 'A3': 220.00, 'A#3': 233.08, 'B3': 246.94,
    'C4': 261.63, 'C#4': 277.18, 'D4': 293.66, 'D#4': 311.13, 'E4': 329.63, 'F4': 349.23, 'F#4': 369.99, 'G4': 392.00, 'G#4': 415.30, 'A4': 440.00, 'A#4': 466.16, 'B4': 493.88,
    'C5': 523.25, 'C#5': 554.37, 'D5': 587.33, 'D#5': 622.25, 'E5': 659.25, 'F5': 698.46, 'F#5': 739.99, 'G5': 783.99, 'G#5': 830.61, 'A5': 880.00, 'A#5': 932.33, 'B5': 987.77,
    'C': 261.63, 'C#': 277.18, 'D': 293.66, 'D#': 311.13, 'E': 329.63, 'F': 349.23, 'F#': 369.99, 'G': 392.00, 'G#': 415.30, 'A': 440.00, 'A#': 466.16, 'B': 493.88
};

// Playback State
let chordDatabase = [];
let isPlaying = false;
let tempoBPM = 100;
let timeSignature = "4/4";
let beatsPerMeasure = 4;
let beatDurationMs = 600;
let timerId = null;
let sequenceToPlay = [];
let currentStepInSequence = 0;
let currentBeatInChord = 0;
let previouslyHighlightedStepIndex = -1;
let previousVoicingInPlayback = null;

// User Sequence State
let userSequence = [];
let validatedChordId = null;
let proposedVoicing = null;

let audioCtx = null;
let isAudioEnabled = false;
let beatCountSinceStart = 0;

// SVG Drawing Constants
const SVG_NS = "http://www.w3.org/2000/svg";
const DIAGRAM_WIDTH = 180;
const DIAGRAM_HEIGHT = 180;
const DIAGRAM_STRINGS = 6;
const DIAGRAM_FRETS_TO_SHOW = 4;
const DIAGRAM_STRING_SPACING = (DIAGRAM_WIDTH * 0.75) / (DIAGRAM_STRINGS - 1);
const DIAGRAM_FRET_SPACING = (DIAGRAM_HEIGHT * 0.6) / DIAGRAM_FRETS_TO_SHOW;
const DIAGRAM_START_X = DIAGRAM_WIDTH * 0.18;
const DIAGRAM_START_Y = DIAGRAM_HEIGHT * 0.25;
const DIAGRAM_DOT_RADIUS = DIAGRAM_STRING_SPACING * 0.3;
const DIAGRAM_NUT_HEIGHT = 6;

const FRETBOARD_WIDTH = 350;
const FRETBOARD_HEIGHT = 150;
const FRETBOARD_STRINGS = 6;
const FRETBOARD_FRETS_TO_SHOW = 12;
const FRETBOARD_STRING_SPACING = (FRETBOARD_HEIGHT * 0.8) / (FRETBOARD_STRINGS - 1);
const FRETBOARD_FRET_SPACING = (FRETBOARD_WIDTH * 0.9) / FRETBOARD_FRETS_TO_SHOW;
const FRETBOARD_START_X = FRETBOARD_WIDTH * 0.05;
const FRETBOARD_START_Y = FRETBOARD_HEIGHT * 0.1;
const FRETBOARD_DOT_RADIUS = FRETBOARD_STRING_SPACING * 0.3;
const FRETBOARD_NUT_WIDTH = 8;

// --- UI Element References ---
const tempoInput = document.getElementById('tempo');
const timeSignatureSelect = document.getElementById('time-signature');
const playPauseButton = document.getElementById('sequence-play-pause-btn');
const chordInputElement = document.getElementById('chord-input');
const suggestionsElement = document.getElementById('chord-suggestions');
const durationInputElement = document.getElementById('chord-duration');
const addChordButton = document.getElementById('add-chord-btn');
const sequenceListElement = document.getElementById('sequence-list');
const clearSequenceButton = document.getElementById('clear-sequence-btn');
const voicingDownButton = document.getElementById('voicing-down-btn');
const voicingUpButton = document.getElementById('voicing-up-btn');
const altDownButton = document.getElementById('alt-down-btn');
const altUpButton = document.getElementById('alt-up-btn');
const diagramContainer = document.getElementById('chord-diagram');
const fretboardContainer = document.getElementById('fretboard-visualization');
const chordNameElement = document.getElementById('displayed-chord-name');
const audioEnabledCheckbox = document.getElementById('audio-enabled');
const metroIndicator = document.getElementById('metronome-indicator');
const songNameInput = document.getElementById('song-name-input');
const saveSongButton = document.getElementById('save-song-btn');
const savedSongsSelect = document.getElementById('saved-songs-select');
const loadSongButton = document.getElementById('load-song-btn');
const deleteSongButton = document.getElementById('delete-song-btn');

// --- Chord Data Representation ---
function getChordData(chordIdentifier) {
    if (!chordIdentifier) return null;
    const identifierLower = chordIdentifier.toLowerCase();
    const foundChord = chordDatabase.find(chord =>
        chord.name.toLowerCase() === identifierLower ||
        (chord.aliases && chord.aliases.some(alias => alias.toLowerCase() === identifierLower))
    );
    return foundChord || null;
}

function getVoicingsForChord(chordIdentifier) {
    const chordData = getChordData(chordIdentifier);
    return chordData ? chordData.voicings : [];
}

async function loadChordDatabase() {
    const filePath = 'chords.json';
    try {
        const response = await fetch(filePath);
        if (!response.ok) {
            throw new Error(`Erreur HTTP! Statut: ${response.status}`);
        }
        const data = await response.json();
        chordDatabase = data;
        onDatabaseLoaded();
    } catch (error) {
        console.error(`Impossible de charger ou parser ${filePath}:`, error);
        alert(`Erreur critique : Impossible de charger la bibliothèque d'accords.\nAssurez-vous que le fichier '${filePath}' existe dans le même dossier et que son format JSON est correct.`);
        chordInputElement.disabled = true;
        chordInputElement.placeholder = "Erreur chargement accords";
    }
}

function onDatabaseLoaded() {
    // La base d'accords est prête.
}

function calculateVoicingPosition(voicing) {
    if (!voicing || !voicing.frets) return 0;
    let minFret = 99, foundFrettedNote = false;
    for (const fret of voicing.frets) {
        if (fret > 0) {
            foundFrettedNote = true;
            minFret = Math.min(minFret, fret);
        }
    }
    return foundFrettedNote ? minFret : 0;
}

function calculateTransitionCost(voicing1, voicing2) {
    if (!voicing1) return 0;
    let cost = 0;
    for (let i = 0; i < DIAGRAM_STRINGS; i++) {
        const fret1 = voicing1.frets[i];
        const finger1 = voicing1.fingers[i];
        const fret2 = voicing2.frets[i];
        const finger2 = voicing2.fingers[i];
        if (fret1 === -1 && fret2 === -1) continue;
        if (finger1 > 0 && finger1 === finger2 && fret1 === fret2) {
            cost += 0;
        } else if (fret1 !== -1 && fret2 === -1) {
            cost += 3;
        } else if (fret1 === -1 && fret2 !== -1) {
            cost += 3;
        } else {
            cost += Math.abs(fret1 - fret2);
            if (finger1 !== finger2 || fret1 === 0 || fret2 === 0) {
                cost += 2;
            }
        }
    }
    return cost;
}

function findBestNextVoicing(previousVoicing, nextChordId) {
    const candidateVoicings = getVoicingsForChord(nextChordId);
    if (!candidateVoicings || candidateVoicings.length === 0) {
        return null;
    }
    if (!previousVoicing || candidateVoicings.length === 1) {
        return candidateVoicings[0];
    }
    let bestVoicing = null;
    let minCost = Infinity;
    candidateVoicings.forEach(candidate => {
        const cost = calculateTransitionCost(previousVoicing, candidate);
        if (cost < minCost) {
            minCost = cost;
            bestVoicing = candidate;
        }
    });
    return bestVoicing;
}

function findAlternate(currentVoicing, currentChordId, direction) {
    if (!currentVoicing || !currentChordId) return null;
    const allVoicings = getVoicingsForChord(currentChordId);
    if (!allVoicings || allVoicings.length <= 1) return null;
    const currentIndex = allVoicings.findIndex(v => v.positionName === currentVoicing.positionName);
    if (currentIndex === -1) return null;
    let targetIndex;
    if (direction === 1) {
        targetIndex = (currentIndex + 1) % allVoicings.length;
    } else {
        targetIndex = (currentIndex - 1 + allVoicings.length) % allVoicings.length;
    }
    return allVoicings[targetIndex];
}

function findVoicing(currentVoicing, currentChordId, direction) {
    if (!currentVoicing || !currentChordId) return null;
    const allVoicings = getVoicingsForChord(currentChordId);
    if (!allVoicings || allVoicings.length <= 1) return null;
    const currentPosition = calculateVoicingPosition(currentVoicing);
    const alternatives = allVoicings
        .map(v => ({ ...v, position: calculateVoicingPosition(v) }))
        .filter(v => JSON.stringify(v.frets) !== JSON.stringify(currentVoicing.frets))
        .sort((a, b) => a.position - b.position);
    if (alternatives.length === 0) return null;
    let targetVoicing = null;
    if (direction === 1) {
        targetVoicing = alternatives.find(v => v.position > currentPosition);
        if (!targetVoicing) targetVoicing = alternatives[0];
    } else {
        const lowerVoicings = alternatives.filter(v => v.position < currentPosition);
        if (lowerVoicings.length > 0) {
            targetVoicing = lowerVoicings[lowerVoicings.length - 1];
        }
        if (!targetVoicing) targetVoicing = alternatives[alternatives.length - 1];
    }
    if (targetVoicing) {
        const { position, ...originalVoicing } = targetVoicing;
        return originalVoicing;
    }
    return null;
}

function identifyPivotFingers(voicing1, voicing2) {
    const pivotIndices = new Set();
    if (!voicing1 || !voicing2 || !voicing1.fingers || !voicing2.fingers || !voicing1.frets || !voicing2.frets) {
        return pivotIndices;
    }
    for (let i = 0; i < DIAGRAM_STRINGS; i++) {
        if (voicing1.fingers[i] > 0 && voicing1.fingers[i] === voicing2.fingers[i] && voicing1.frets[i] === voicing2.frets[i]) {
            pivotIndices.add(i);
        }
    }
    return pivotIndices;
}

// --- Drawing Functions ---
function createSvgElement(tag, attributes) {
    const element = document.createElementNS(SVG_NS, tag);
    for (const key in attributes) {
        element.setAttribute(key, attributes[key]);
    }
    return element;
}

function drawChordDiagram(voicingData, parentElement, pivotIndices = new Set()) {
    parentElement.innerHTML = '';
    if (!voicingData || !voicingData.frets) {
        parentElement.innerHTML = '<p>Voicing non disponible</p>';
        return;
    }
    const svg = createSvgElement('svg', {
        width: DIAGRAM_WIDTH,
        height: DIAGRAM_HEIGHT,
        viewBox: `0 0 ${DIAGRAM_WIDTH} ${DIAGRAM_HEIGHT}`
    });

    let minFret = 0, maxFret = 0, hasFrettedNotes = false;
    voicingData.frets.forEach(fret => {
        if (fret > 0) {
            if (!hasFrettedNotes || fret < minFret) minFret = fret;
            maxFret = Math.max(maxFret, fret);
            hasFrettedNotes = true;
        } else if (fret === 0) {
            maxFret = Math.max(maxFret, 0);
        }
    });

    let startFretNum = 0, topIsNut = true;
    if (hasFrettedNotes && maxFret > DIAGRAM_FRETS_TO_SHOW) {
        topIsNut = false;
        startFretNum = minFret - 1;
        if (startFretNum < 1) startFretNum = 1;
    }

    const topLineWidth = (DIAGRAM_STRINGS - 1) * DIAGRAM_STRING_SPACING;
    const topLeftX = DIAGRAM_START_X;

    if (!topIsNut) {
        const fretIndicator = createSvgElement('text', {
            x: DIAGRAM_START_X - 8,
            y: DIAGRAM_START_Y + DIAGRAM_FRET_SPACING * 0.7,
            'font-size': '12px',
            fill: '#555',
            'text-anchor': 'end'
        });
        fretIndicator.textContent = `${startFretNum + 1}fr`;
        svg.appendChild(fretIndicator);
    }

    svg.appendChild(createSvgElement('rect', {
        x: topLeftX,
        y: DIAGRAM_START_Y - (topIsNut ? DIAGRAM_NUT_HEIGHT / 2 : 1),
        width: topLineWidth,
        height: topIsNut ? DIAGRAM_NUT_HEIGHT : 2,
        fill: '#666'
    }));

    for (let i = 1; i <= DIAGRAM_FRETS_TO_SHOW; i++) {
        const y = DIAGRAM_START_Y + i * DIAGRAM_FRET_SPACING;
        svg.appendChild(createSvgElement('line', {
            x1: DIAGRAM_START_X,
            y1: y,
            x2: DIAGRAM_START_X + topLineWidth,
            y2: y,
            stroke: '#ccc',
            'stroke-width': 1
        }));
    }

    for (let i = 0; i < DIAGRAM_STRINGS; i++) {
        const x = DIAGRAM_START_X + i * DIAGRAM_STRING_SPACING;
        svg.appendChild(createSvgElement('line', {
            x1: x,
            y1: DIAGRAM_START_Y,
            x2: x,
            y2: DIAGRAM_START_Y + DIAGRAM_FRETS_TO_SHOW * DIAGRAM_FRET_SPACING,
            stroke: '#aaa',
            'stroke-width': 1
        }));
        const markerY = DIAGRAM_START_Y - (topIsNut ? DIAGRAM_NUT_HEIGHT : 5) - 5;
        const actualFret = voicingData.frets[i];
        let markerText = '';
        if (actualFret === 0 && topIsNut) markerText = 'O';
        else if (actualFret === -1) markerText = 'X';
        if (markerText) {
            const textElement = createSvgElement('text', {
                x: x,
                y: markerY,
                'font-size': '14px',
                fill: '#555',
                'text-anchor': 'middle'
            });
            textElement.textContent = markerText;
            svg.appendChild(textElement);
        }
    }

    let barreInfo = null;
    const firstPossibleBarreFret = topIsNut ? 1 : startFretNum + 1;
    if (voicingData.fingers) {
        const barreFinger = 1;
        let barreStrings = [];
        for (let i = 0; i < DIAGRAM_STRINGS; i++) {
            if (voicingData.frets[i] === firstPossibleBarreFret &&
                voicingData.fingers[i] === barreFinger) {
                barreStrings.push(i);
            }
        }
        if (barreStrings.length >= 2) {
            barreInfo = {
                fret: firstPossibleBarreFret,
                finger: barreFinger,
                startStringIndex: Math.min(...barreStrings),
                endStringIndex: Math.max(...barreStrings)
            };
            const barreXStart = DIAGRAM_START_X + barreInfo.startStringIndex * DIAGRAM_STRING_SPACING;
            const barreXEnd = DIAGRAM_START_X + barreInfo.endStringIndex * DIAGRAM_STRING_SPACING;
            const barreWidth = barreXEnd - barreXStart;
            const barreHeight = DIAGRAM_DOT_RADIUS * 1.8;
            const barreY = DIAGRAM_START_Y + (1 - 0.5) * DIAGRAM_FRET_SPACING - (barreHeight / 2);
            svg.appendChild(createSvgElement('rect', {
                x: barreXStart,
                y: barreY,
                width: barreWidth,
                height: barreHeight,
                fill: '#333',
                rx: barreHeight / 2,
                ry: barreHeight / 2
            }));
        }
    }

    for (let i = 0; i < DIAGRAM_STRINGS; i++) {
        const fret = voicingData.frets[i];
        const finger = voicingData.fingers ? voicingData.fingers[i] : 0;
        if (barreInfo &&
            finger === barreInfo.finger &&
            fret === barreInfo.fret &&
            i >= barreInfo.startStringIndex &&
            i <= barreInfo.endStringIndex) {
            continue;
        }
        if (fret > startFretNum && fret <= startFretNum + DIAGRAM_FRETS_TO_SHOW) {
            const dotX = DIAGRAM_START_X + i * DIAGRAM_STRING_SPACING;
            const dotY = DIAGRAM_START_Y + (fret - startFretNum - 0.5) * DIAGRAM_FRET_SPACING;
            const isPivot = pivotIndices.has(i);
            const dotColor = isPivot ? '#28a745' : '#333';
            svg.appendChild(createSvgElement('circle', {
                cx: dotX,
                cy: dotY,
                r: DIAGRAM_DOT_RADIUS,
                fill: dotColor
            }));
            if ((typeof finger === 'string' && finger.trim() !== '') ||
                (typeof finger === 'number' && finger > 0)) {
                svg.appendChild(createSvgElement('text', {
                    x: dotX,
                    y: dotY + DIAGRAM_DOT_RADIUS * 0.4,
                    'font-size': `${DIAGRAM_DOT_RADIUS * 1.2}px`,
                    fill: '#fff',
                    'text-anchor': 'middle',
                    'font-weight': 'bold'
                })).textContent = finger;
            }
        }
    }
    parentElement.appendChild(svg);
}

function drawFretboardVisualization(voicingData, parentElement, pivotIndices = new Set()) {
    parentElement.innerHTML = '';
    if (!voicingData) {
        parentElement.innerHTML = '<p>Voicing non disponible</p>';
        return;
    }
    const svg = createSvgElement('svg', {
        width: FRETBOARD_WIDTH,
        height: FRETBOARD_HEIGHT,
        viewBox: `0 0 ${FRETBOARD_WIDTH} ${FRETBOARD_HEIGHT}`
    });
    const backgroundX = FRETBOARD_START_X - FRETBOARD_NUT_WIDTH;
    const backgroundY = FRETBOARD_START_Y;
    const backgroundWidth = (FRETBOARD_START_X + FRETBOARD_FRETS_TO_SHOW * FRETBOARD_FRET_SPACING + 5) - backgroundX;
    const backgroundHeight = (FRETBOARD_STRINGS - 1) * FRETBOARD_STRING_SPACING;
    svg.appendChild(createSvgElement('rect', {
        x: backgroundX,
        y: backgroundY,
        width: backgroundWidth,
        height: backgroundHeight,
        fill: '#f0e1c1'
    }));
    svg.appendChild(createSvgElement('rect', {
        x: FRETBOARD_START_X - FRETBOARD_NUT_WIDTH,
        y: FRETBOARD_START_Y,
        width: FRETBOARD_NUT_WIDTH,
        height: backgroundHeight,
        fill: '#555'
    }));
    for (let i = 1; i <= FRETBOARD_FRETS_TO_SHOW; i++) {
        const x = FRETBOARD_START_X + i * FRETBOARD_FRET_SPACING;
        svg.appendChild(createSvgElement('line', {
            x1: x,
            y1: FRETBOARD_START_Y,
            x2: x,
            y2: FRETBOARD_START_Y + backgroundHeight,
            stroke: '#aaa',
            'stroke-width': 1
        }));
    }
    for (let i = 0; i < FRETBOARD_STRINGS; i++) {
        const y = FRETBOARD_START_Y + (FRETBOARD_STRINGS - 1 - i) * FRETBOARD_STRING_SPACING;
        svg.appendChild(createSvgElement('line', {
            x1: backgroundX,
            y1: y,
            x2: backgroundX + backgroundWidth,
            y2: y,
            stroke: '#777',
            'stroke-width': 1 + (FRETBOARD_STRINGS - 1 - i) * 0.2
        }));
        const fretNumber = voicingData.frets[i];
        if (fretNumber > 0 && fretNumber <= FRETBOARD_FRETS_TO_SHOW) {
            const dotX = FRETBOARD_START_X + (fretNumber - 0.5) * FRETBOARD_FRET_SPACING;
            const dotY = y;
            const isPivot = pivotIndices.has(i);
            const dotFillColor = isPivot ? '#28a745' : '#333';
            const dotStrokeColor = isPivot ? '#0f5132' : '#fff';
            svg.appendChild(createSvgElement('circle', {
                cx: dotX,
                cy: dotY,
                r: FRETBOARD_DOT_RADIUS,
                fill: dotFillColor,
                stroke: dotStrokeColor,
                'stroke-width': 1
            }));
        }
    }
    const markerFrets = [3, 5, 7, 9];
    const doubleMarkerFret = 12;
    const markerRadius = FRETBOARD_STRING_SPACING * 0.2;
    markerFrets.forEach(fret => {
        if (fret <= FRETBOARD_FRETS_TO_SHOW) {
            const markerX = FRETBOARD_START_X + (fret - 0.5) * FRETBOARD_FRET_SPACING;
            const markerY = FRETBOARD_START_Y + backgroundHeight / 2;
            svg.appendChild(createSvgElement('circle', {
                cx: markerX,
                cy: markerY,
                r: markerRadius,
                fill: '#adadad'
            }));
        }
    });
    if (doubleMarkerFret <= FRETBOARD_FRETS_TO_SHOW) {
        const markerX = FRETBOARD_START_X + (doubleMarkerFret - 0.5) * FRETBOARD_FRET_SPACING;
        const y_Si = FRETBOARD_START_Y + (FRETBOARD_STRINGS - 1 - 4) * FRETBOARD_STRING_SPACING;
        const y_Sol = FRETBOARD_START_Y + (FRETBOARD_STRINGS - 1 - 3) * FRETBOARD_STRING_SPACING;
        const y_La = FRETBOARD_START_Y + (FRETBOARD_STRINGS - 1 - 1) * FRETBOARD_STRING_SPACING;
        const y_Re = FRETBOARD_START_Y + (FRETBOARD_STRINGS - 1 - 2) * FRETBOARD_STRING_SPACING;
        const markerY_Top = (y_Si + y_Sol) / 2;
        const markerY_Bottom = (y_La + y_Re) / 2;
        svg.appendChild(createSvgElement('circle', {
            cx: markerX,
            cy: markerY_Top,
            r: markerRadius,
            fill: '#adadad'
        }));
        svg.appendChild(createSvgElement('circle', {
            cx: markerX,
            cy: markerY_Bottom,
            r: markerRadius,
            fill: '#adadad'
        }));
    }
    parentElement.appendChild(svg);
}

function displayChord(chordName, voicingObject, pivotIndices = new Set()) {
    if (chordName && voicingObject) {
        chordNameElement.textContent = chordName;
        drawChordDiagram(voicingObject, diagramContainer, pivotIndices);
        drawFretboardVisualization(voicingObject, fretboardContainer, pivotIndices);
        const alternativesExist = (getVoicingsForChord(chordName)?.length || 0) > 1;
        voicingDownButton.disabled = !alternativesExist;
        voicingUpButton.disabled = !alternativesExist;
        altDownButton.disabled = !alternativesExist;
        altUpButton.disabled = !alternativesExist;
    } else {
        chordNameElement.textContent = "--";
        diagramContainer.innerHTML = '<p>...</p>';
        fretboardContainer.innerHTML = '<p>...</p>';
        voicingDownButton.disabled = true;
        voicingUpButton.disabled = true;
        altDownButton.disabled = true;
        altUpButton.disabled = true;
    }
}

// --- Playback Logic ---
function playTick() {
    if (sequenceToPlay.length === 0) {
        stopPlayback();
        return;
    }
    const currentChordInfoForSound = sequenceToPlay[currentStepInSequence];
    const rootNote = getChordData(currentChordInfoForSound.chordId)?.root;
    if (rootNote) {
        playNoteSound(rootNote);
    }
    updateMetronomeVisual(beatCountSinceStart);
    const currentChordInfo = sequenceToPlay[currentStepInSequence];
    const currentVoicing = currentChordInfo.voicing;
    if (currentBeatInChord === 0) {
        const chordData = getChordData(currentChordInfo.chordId);
        const pivotIndices = identifyPivotFingers(previousVoicingInPlayback, currentVoicing);
        displayChord(chordData ? chordData.name : currentChordInfo.chordId, currentVoicing, pivotIndices);
        const previousLi = sequenceListElement.querySelector(`li[data-index="${previouslyHighlightedStepIndex}"]`);
        if (previousLi) {
            previousLi.classList.remove('playing-step');
        }
        const currentLi = sequenceListElement.querySelector(`li[data-index="${currentStepInSequence}"]`);
        if (currentLi) { currentLi.classList.add('playing-step'); }
        previouslyHighlightedStepIndex = currentStepInSequence;
    }
    previousVoicingInPlayback = currentVoicing;
    currentBeatInChord++;
    beatCountSinceStart++;
    if (currentBeatInChord >= currentChordInfo.duration) {
        currentStepInSequence++;
        if (currentStepInSequence >= sequenceToPlay.length) {
            currentStepInSequence = 0;
        }
        currentBeatInChord = 0;
    }
}

function startPlayback() {
    if (timerId !== null || sequenceToPlay.length === 0) {
        return;
    }
    isPlaying = true;
    playPauseButton.textContent = '⏸️ Pause';
    playPauseButton.classList.add('playing');
    if (currentStepInSequence === 0 && currentBeatInChord === 0) {
        previouslyHighlightedStepIndex = -1;
        previousVoicingInPlayback = null;
    }
    beatCountSinceStart = currentStepInSequence * beatsPerMeasure + currentBeatInChord;
    if (sequenceToPlay.length > 0) {
        const currentChordInfo = sequenceToPlay[currentStepInSequence];
        const chordData = getChordData(currentChordInfo.chordId);
        const pivotIndices = identifyPivotFingers(previousVoicingInPlayback, currentChordInfo.voicing);
        displayChord(chordData ? chordData.name : currentChordInfo.chordId, currentChordInfo.voicing, pivotIndices);
        const currentLi = sequenceListElement.querySelector(`li[data-index="${currentStepInSequence}"]`);
        if (currentLi) { currentLi.classList.add('playing-step'); }
        updateMetronomeVisual(beatCountSinceStart);
        previousVoicingInPlayback = currentChordInfo.voicing;
    }
    timerId = setInterval(playTick, beatDurationMs);
}

function stopPlayback(resetButtonText = true) {
    if (timerId === null) {
        return;
    }
    clearInterval(timerId);
    timerId = null;
    isPlaying = false;
    if (metroIndicator) {
        metroIndicator.classList.remove('strong-beat', 'weak-beat');
        metroIndicator.textContent = '';
    }
    if (resetButtonText && previouslyHighlightedStepIndex >= 0) {
        const previousLi = sequenceListElement.querySelector(`li[data-index="${previouslyHighlightedStepIndex}"]`);
        if (previousLi) {
            previousLi.classList.remove('playing-step');
        }
    }
    if (resetButtonText) {
        previouslyHighlightedStepIndex = -1;
        playPauseButton.textContent = '▶️ Jouer la Chanson';
        playPauseButton.classList.remove('playing');
    }
}

// --- Tempo & Time Signature ---
function _updateTempoInternal() {
    tempoBPM = parseInt(tempoInput.value, 10);
    if (isNaN(tempoBPM) || tempoBPM < 40 || tempoBPM > 240) {
        tempoBPM = 100;
        tempoInput.value = tempoBPM;
    }
    beatDurationMs = (60 * 1000) / tempoBPM;
}

function _updateTimeSignatureInternal() {
    timeSignature = timeSignatureSelect.value;
    const parts = timeSignature.split('/');
    beatsPerMeasure = parseInt(parts[0], 10) || 4;
}

// --- Metronome ---
function updateMetronomeVisual(beatCount) {
    if (!metroIndicator) return;
    const currentBeatInMeasure = beatCount % beatsPerMeasure;
    const beatNumberToDisplay = currentBeatInMeasure + 1;
    metroIndicator.textContent = beatNumberToDisplay;
    metroIndicator.classList.remove('strong-beat', 'weak-beat');
    if (currentBeatInMeasure === 0) {
        metroIndicator.classList.add('strong-beat');
    } else {
        metroIndicator.classList.add('weak-beat');
    }
}

// --- User Input & Sequence Management ---
function renderSequenceList() {
    sequenceListElement.innerHTML = '';
    if (userSequence.length === 0) {
        sequenceListElement.innerHTML = '<li>(Séquence vide)</li>';
        return;
    }
    userSequence.forEach((item, index) => {
        const listItem = document.createElement('li');
        listItem.textContent = `${index + 1}. ${item.chordId} (${item.duration} temps)`;
        listItem.dataset.index = index;
        sequenceListElement.appendChild(listItem);
    });
}

function validateAndDisplayChordInput() {
    const chordIdentifier = chordInputElement.value.trim();
    const chordData = getChordData(chordIdentifier);
    if(chordData) {
        validatedChordId = chordData.aliases ? chordData.aliases[0] || chordData.name : chordData.name;
        const lastSequenceItem = userSequence.length > 0 ? userSequence[userSequence.length - 1] : null;
        const lastVoicingInSequence = lastSequenceItem ? lastSequenceItem.voicing : null;
        proposedVoicing = findBestNextVoicing(lastVoicingInSequence, validatedChordId);
        if(proposedVoicing) {
            displayChord(chordData.name, proposedVoicing);
        } else {
            displayChord(chordData.name, null);
            validatedChordId = null;
            proposedVoicing = null;
        }
    } else {
        validatedChordId = null;
        proposedVoicing = null;
        displayChord(null, null);
    }
}

addChordButton.addEventListener('click', () => {
    const duration = parseInt(durationInputElement.value, 10);
    if (validatedChordId && proposedVoicing && duration > 0) {
        userSequence.push({
            chordId: validatedChordId,
            duration: duration,
            voicing: proposedVoicing
        });
        renderSequenceList();
        saveCurrentSongState();
        chordInputElement.value = '';
        validatedChordId = null;
        proposedVoicing = null;
        suggestionsElement.innerHTML = '';
        suggestionsElement.style.display = 'none';
        displayChord(null, null);
        chordInputElement.focus();
    } else if (!validatedChordId || !proposedVoicing) {
        alert("Veuillez saisir ou sélectionner un accord valide (un voicing doit être affiché).");
        chordInputElement.focus();
    } else {
        alert("Veuillez saisir une durée valide (nombre de temps > 0).");
        durationInputElement.focus();
    }
});

clearSequenceButton.addEventListener('click', () => {
    if (confirm("Êtes-vous sûr de vouloir la chanson ?")) {
        stopPlayback();
        userSequence = [];
        renderSequenceList();
        saveCurrentSongState();
    }
});

voicingDownButton.addEventListener('click', () => {
    if (!validatedChordId || !proposedVoicing) return;
    const alternate = findVoicing(proposedVoicing, validatedChordId, -1);
    if (alternate) {
        proposedVoicing = alternate;
        const chordData = getChordData(validatedChordId);
        displayChord(chordData ? chordData.name : validatedChordId, proposedVoicing);
    }
});

voicingUpButton.addEventListener('click', () => {
    if (!validatedChordId || !proposedVoicing) return;
    const alternate = findVoicing(proposedVoicing, validatedChordId, +1);
    if (alternate) {
        proposedVoicing = alternate;
        const chordData = getChordData(validatedChordId);
        displayChord(chordData ? chordData.name : validatedChordId, proposedVoicing);
    }
});

altDownButton.addEventListener('click', () => {
    if (!validatedChordId || !proposedVoicing) return;
    const alternate = findAlternate(proposedVoicing, validatedChordId, -1);
    if (alternate) {
        proposedVoicing = alternate;
        const chordData = getChordData(validatedChordId);
        displayChord(chordData ? chordData.name : validatedChordId, proposedVoicing);
    }
});

altUpButton.addEventListener('click', () => {
    if (!validatedChordId || !proposedVoicing) return;
    const alternate = findAlternate(proposedVoicing, validatedChordId, +1);
    if (alternate) {
        proposedVoicing = alternate;
        const chordData = getChordData(validatedChordId);
        displayChord(chordData ? chordData.name : validatedChordId, proposedVoicing);
    }
});

playPauseButton.addEventListener('click', () => {
    if (isPlaying) {
        stopPlayback();
    } else {
        initAudio();
        sequenceToPlay = userSequence;
        if (sequenceToPlay.length > 0) {
            startPlayback();
        } else {
            alert("La chanson est vide. Ajoutez des accords avant de jouer.");
        }
    }
});

audioEnabledCheckbox.addEventListener('change', () => {
    isAudioEnabled = audioEnabledCheckbox.checked;
});

document.addEventListener('DOMContentLoaded', async () => {
    await loadChordDatabase();
    loadCurrentSongState();
    audioEnabledCheckbox.checked = isAudioEnabled;
    voicingDownButton.disabled = true;
    voicingUpButton.disabled = true;
    altDownButton.disabled = true;
    altUpButton.disabled = true;
});

saveSongButton.addEventListener('click', () => {
    const songName = songNameInput.value.trim();
    if (!songName) {
        alert("Veuillez entrer un nom pour la chanson avant de sauvegarder.");
        songNameInput.focus();
        return;
    }
    let savedSongs = {};
    try {
        const storedData = localStorage.getItem(SAVED_SONGS_KEY);
        if (storedData) {
            savedSongs = JSON.parse(storedData);
        }
    } catch (error) {
        console.error("Erreur lecture chansons sauvegardées:", error);
    }
    const currentSongState = {
        tempo: tempoBPM,
        timeSig: timeSignature,
        song: userSequence
    };
    savedSongs[songName] = currentSongState;
    try {
        localStorage.setItem(SAVED_SONGS_KEY, JSON.stringify(savedSongs));
        alert(`Chanson "${songName}" sauvegardée avec succès !`);
        populateSavedSongsList();
    } catch (error) {
        console.error("Erreur sauvegarde chanson nommée:", error);
        alert("Erreur lors de la sauvegarde de la chanson.");
    }
});

loadSongButton.addEventListener('click', () => {
    const selectedSongName = savedSongsSelect.value;
    if (!selectedSongName) {
        alert("Veuillez sélectionner une chanson à charger.");
        return;
    }
    try {
        const storedData = localStorage.getItem(SAVED_SONGS_KEY);
        if (storedData) {
            const savedSongs = JSON.parse(storedData);
            if (savedSongs[selectedSongName]) {
                applyLoadedState(savedSongs[selectedSongName], selectedSongName);
                saveCurrentSongState();
            } else {
                alert(`Erreur: Chanson "${selectedSongName}" non trouvée dans les données sauvegardées.`);
                populateSavedSongsList();
            }
        } else {
            alert("Aucune chanson sauvegardée n'a été trouvée.");
        }
    } catch (error) {
        console.error("Erreur chargement chanson nommée:", error);
        alert("Erreur lors du chargement de la chanson.");
    }
});

deleteSongButton.addEventListener('click', () => {
    const selectedSongName = savedSongsSelect.value;
    if (!selectedSongName) {
        alert("Veuillez sélectionner une chanson à supprimer.");
        return;
    }
    if (confirm(`Êtes-vous sûr de vouloir supprimer définitivement la chanson "${selectedSongName}" ?`)) {
        try {
            const storedData = localStorage.getItem(SAVED_SONGS_KEY);
            if (storedData) {
                let savedSongs = JSON.parse(storedData);
                if (savedSongs[selectedSongName]) {
                    delete savedSongs[selectedSongName];
                    localStorage.setItem(SAVED_SONGS_KEY, JSON.stringify(savedSongs));
                    alert(`Chanson "${selectedSongName}" supprimée.`);
                    populateSavedSongsList();
                    if(songNameInput.value === selectedSongName) {
                        songNameInput.value = "";
                    }
                } else {
                    alert(`Erreur: Chanson "${selectedSongName}" non trouvée.`);
                }
            }
        } catch (error) {
            console.error("Erreur suppression chanson nommée:", error);
            alert("Erreur lors de la suppression de la chanson.");
        }
    }
});

function saveCurrentSongState() {
    const state = {
        tempo: tempoBPM,
        timeSig: timeSignature,
        song: userSequence
    };
    try {
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(state));
    } catch (error) {
        console.error("Erreur lors de la sauvegarde dans localStorage:", error);
    }
}

function loadCurrentSongState() {
    try {
        const savedData = localStorage.getItem(LOCAL_STORAGE_KEY);
        if (savedData) {
            const loadedState = JSON.parse(savedData);
            applyLoadedState(loadedState);
        } else {
            applyLoadedState({ tempo: 100, timeSig: "4/4", song: [] });
        }
    } catch (error) {
        console.error("Erreur lors du chargement de la session:", error);
        applyLoadedState({ tempo: 100, timeSig: "4/4", song: [] });
    }
    populateSavedSongsList();
}

function populateSavedSongsList() {
    let savedSongs = {};
    try {
        const storedData = localStorage.getItem(SAVED_SONGS_KEY);
        if (storedData) {
            savedSongs = JSON.parse(storedData);
        }
    } catch (error) {
        console.error("Erreur lors de la lecture des chansons sauvegardées:", error);
    }
    savedSongsSelect.innerHTML = '<option value="">-- Charger une chanson --</option>';
    const songNames = Object.keys(savedSongs).sort();
    songNames.forEach(name => {
        const option = document.createElement('option');
        option.value = name;
        option.textContent = name;
        savedSongsSelect.appendChild(option);
    });
}

function applyLoadedState(loadedState, songName = "") {
    stopPlayback();
    tempoBPM = parseInt(loadedState.tempo, 10) || 100;
    timeSignature = loadedState.timeSig || "4/4";
    userSequence = Array.isArray(loadedState.song) ? loadedState.song : [];
    tempoInput.value = tempoBPM;
    timeSignatureSelect.value = timeSignature;
    songNameInput.value = songName;
    renderSequenceList();
    _updateTempoInternal();
    _updateTimeSignatureInternal();
    if (userSequence.length > 0 && userSequence[0].voicing) {
       const firstChordData = getChordData(userSequence[0].chordId);
       displayChord(firstChordData ? firstChordData.name : userSequence[0].chordId, userSequence[0].voicing, new Set());
    } else {
       displayChord(null, null);
    }
}

function initAudio() {
    if (!audioCtx) {
        try {
            audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        } catch (e) {
            console.error("API Web Audio non supportée par ce navigateur.", e);
            alert("Votre navigateur ne supporte pas l'API Web Audio nécessaire pour le son.");
            isAudioEnabled = false;
            audioEnabledCheckbox.checked = false;
            audioEnabledCheckbox.disabled = true;
        }
    }
}

function playNoteSound(noteName) {
    if (!isAudioEnabled || !audioCtx || audioCtx.state === 'suspended') {
        if(audioCtx && audioCtx.state === 'suspended') {
            audioCtx.resume();
        }
        return;
    }
    const frequency = noteFrequencies[noteName] || noteFrequencies[noteName.toUpperCase()] || noteFrequencies['A4'];
    if (!frequency) return;
    const oscillator = audioCtx.createOscillator();
    const gainNode = audioCtx.createGain();
    oscillator.type = 'triangle';
    oscillator.frequency.setValueAtTime(frequency, audioCtx.currentTime);
    gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.4, audioCtx.currentTime + 0.01);
    gainNode.gain.exponentialRampToValueAtTime(0.001, audioCtx.currentTime + 0.5);
    oscillator.connect(gainNode);
    gainNode.connect(audioCtx.destination);
    oscillator.start(audioCtx.currentTime);
    oscillator.stop(audioCtx.currentTime + 0.55);
}

if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('./service-worker.js')
        .catch(err => {
          console.error('Échec de l\'enregistrement du Service Worker:', err);
        });
    });
}